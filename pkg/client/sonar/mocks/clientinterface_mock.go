// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	sonar "github.com/epam/edp-sonar-operator/pkg/client/sonar"
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// MockClientInterface is an autogenerated mock type for the ClientInterface type
type MockClientInterface struct {
	mock.Mock
}

type MockClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientInterface) EXPECT() *MockClientInterface_Expecter {
	return &MockClientInterface_Expecter{mock: &_m.Mock}
}

// ActivateQualityProfileRule provides a mock function with given fields: ctx, profileKey, rule
func (_m *MockClientInterface) ActivateQualityProfileRule(ctx context.Context, profileKey string, rule sonar.Rule) error {
	ret := _m.Called(ctx, profileKey, rule)

	if len(ret) == 0 {
		panic("no return value specified for ActivateQualityProfileRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, sonar.Rule) error); ok {
		r0 = rf(ctx, profileKey, rule)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_ActivateQualityProfileRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActivateQualityProfileRule'
type MockClientInterface_ActivateQualityProfileRule_Call struct {
	*mock.Call
}

// ActivateQualityProfileRule is a helper method to define mock.On call
//   - ctx context.Context
//   - profileKey string
//   - rule sonar.Rule
func (_e *MockClientInterface_Expecter) ActivateQualityProfileRule(ctx interface{}, profileKey interface{}, rule interface{}) *MockClientInterface_ActivateQualityProfileRule_Call {
	return &MockClientInterface_ActivateQualityProfileRule_Call{Call: _e.mock.On("ActivateQualityProfileRule", ctx, profileKey, rule)}
}

func (_c *MockClientInterface_ActivateQualityProfileRule_Call) Run(run func(ctx context.Context, profileKey string, rule sonar.Rule)) *MockClientInterface_ActivateQualityProfileRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(sonar.Rule))
	})
	return _c
}

func (_c *MockClientInterface_ActivateQualityProfileRule_Call) Return(_a0 error) *MockClientInterface_ActivateQualityProfileRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_ActivateQualityProfileRule_Call) RunAndReturn(run func(context.Context, string, sonar.Rule) error) *MockClientInterface_ActivateQualityProfileRule_Call {
	_c.Call.Return(run)
	return _c
}

// AddGroupToPermissionTemplate provides a mock function with given fields: ctx, templateID, groupName, permission
func (_m *MockClientInterface) AddGroupToPermissionTemplate(ctx context.Context, templateID string, groupName string, permission string) error {
	ret := _m.Called(ctx, templateID, groupName, permission)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupToPermissionTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, templateID, groupName, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_AddGroupToPermissionTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddGroupToPermissionTemplate'
type MockClientInterface_AddGroupToPermissionTemplate_Call struct {
	*mock.Call
}

// AddGroupToPermissionTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - templateID string
//   - groupName string
//   - permission string
func (_e *MockClientInterface_Expecter) AddGroupToPermissionTemplate(ctx interface{}, templateID interface{}, groupName interface{}, permission interface{}) *MockClientInterface_AddGroupToPermissionTemplate_Call {
	return &MockClientInterface_AddGroupToPermissionTemplate_Call{Call: _e.mock.On("AddGroupToPermissionTemplate", ctx, templateID, groupName, permission)}
}

func (_c *MockClientInterface_AddGroupToPermissionTemplate_Call) Run(run func(ctx context.Context, templateID string, groupName string, permission string)) *MockClientInterface_AddGroupToPermissionTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClientInterface_AddGroupToPermissionTemplate_Call) Return(_a0 error) *MockClientInterface_AddGroupToPermissionTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_AddGroupToPermissionTemplate_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockClientInterface_AddGroupToPermissionTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionToGroup provides a mock function with given fields: ctx, groupName, permission
func (_m *MockClientInterface) AddPermissionToGroup(ctx context.Context, groupName string, permission string) error {
	ret := _m.Called(ctx, groupName, permission)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionToGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, groupName, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_AddPermissionToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionToGroup'
type MockClientInterface_AddPermissionToGroup_Call struct {
	*mock.Call
}

// AddPermissionToGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupName string
//   - permission string
func (_e *MockClientInterface_Expecter) AddPermissionToGroup(ctx interface{}, groupName interface{}, permission interface{}) *MockClientInterface_AddPermissionToGroup_Call {
	return &MockClientInterface_AddPermissionToGroup_Call{Call: _e.mock.On("AddPermissionToGroup", ctx, groupName, permission)}
}

func (_c *MockClientInterface_AddPermissionToGroup_Call) Run(run func(ctx context.Context, groupName string, permission string)) *MockClientInterface_AddPermissionToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_AddPermissionToGroup_Call) Return(_a0 error) *MockClientInterface_AddPermissionToGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_AddPermissionToGroup_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_AddPermissionToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionToUser provides a mock function with given fields: ctx, userLogin, permission
func (_m *MockClientInterface) AddPermissionToUser(ctx context.Context, userLogin string, permission string) error {
	ret := _m.Called(ctx, userLogin, permission)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userLogin, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_AddPermissionToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionToUser'
type MockClientInterface_AddPermissionToUser_Call struct {
	*mock.Call
}

// AddPermissionToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userLogin string
//   - permission string
func (_e *MockClientInterface_Expecter) AddPermissionToUser(ctx interface{}, userLogin interface{}, permission interface{}) *MockClientInterface_AddPermissionToUser_Call {
	return &MockClientInterface_AddPermissionToUser_Call{Call: _e.mock.On("AddPermissionToUser", ctx, userLogin, permission)}
}

func (_c *MockClientInterface_AddPermissionToUser_Call) Run(run func(ctx context.Context, userLogin string, permission string)) *MockClientInterface_AddPermissionToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_AddPermissionToUser_Call) Return(_a0 error) *MockClientInterface_AddPermissionToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_AddPermissionToUser_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_AddPermissionToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionsToGroup provides a mock function with given fields: groupName, permissions
func (_m *MockClientInterface) AddPermissionsToGroup(groupName string, permissions string) error {
	ret := _m.Called(groupName, permissions)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionsToGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(groupName, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_AddPermissionsToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionsToGroup'
type MockClientInterface_AddPermissionsToGroup_Call struct {
	*mock.Call
}

// AddPermissionsToGroup is a helper method to define mock.On call
//   - groupName string
//   - permissions string
func (_e *MockClientInterface_Expecter) AddPermissionsToGroup(groupName interface{}, permissions interface{}) *MockClientInterface_AddPermissionsToGroup_Call {
	return &MockClientInterface_AddPermissionsToGroup_Call{Call: _e.mock.On("AddPermissionsToGroup", groupName, permissions)}
}

func (_c *MockClientInterface_AddPermissionsToGroup_Call) Run(run func(groupName string, permissions string)) *MockClientInterface_AddPermissionsToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_AddPermissionsToGroup_Call) Return(_a0 error) *MockClientInterface_AddPermissionsToGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_AddPermissionsToGroup_Call) RunAndReturn(run func(string, string) error) *MockClientInterface_AddPermissionsToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddUserToGroup provides a mock function with given fields: ctx, userLogin, groupName
func (_m *MockClientInterface) AddUserToGroup(ctx context.Context, userLogin string, groupName string) error {
	ret := _m.Called(ctx, userLogin, groupName)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userLogin, groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_AddUserToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToGroup'
type MockClientInterface_AddUserToGroup_Call struct {
	*mock.Call
}

// AddUserToGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - userLogin string
//   - groupName string
func (_e *MockClientInterface_Expecter) AddUserToGroup(ctx interface{}, userLogin interface{}, groupName interface{}) *MockClientInterface_AddUserToGroup_Call {
	return &MockClientInterface_AddUserToGroup_Call{Call: _e.mock.On("AddUserToGroup", ctx, userLogin, groupName)}
}

func (_c *MockClientInterface_AddUserToGroup_Call) Run(run func(ctx context.Context, userLogin string, groupName string)) *MockClientInterface_AddUserToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_AddUserToGroup_Call) Return(_a0 error) *MockClientInterface_AddUserToGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_AddUserToGroup_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_AddUserToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigureGeneralSettings provides a mock function with given fields: settings
func (_m *MockClientInterface) ConfigureGeneralSettings(settings ...sonar.SettingRequest) error {
	_va := make([]interface{}, len(settings))
	for _i := range settings {
		_va[_i] = settings[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureGeneralSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...sonar.SettingRequest) error); ok {
		r0 = rf(settings...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_ConfigureGeneralSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigureGeneralSettings'
type MockClientInterface_ConfigureGeneralSettings_Call struct {
	*mock.Call
}

// ConfigureGeneralSettings is a helper method to define mock.On call
//   - settings ...sonar.SettingRequest
func (_e *MockClientInterface_Expecter) ConfigureGeneralSettings(settings ...interface{}) *MockClientInterface_ConfigureGeneralSettings_Call {
	return &MockClientInterface_ConfigureGeneralSettings_Call{Call: _e.mock.On("ConfigureGeneralSettings",
		append([]interface{}{}, settings...)...)}
}

func (_c *MockClientInterface_ConfigureGeneralSettings_Call) Run(run func(settings ...sonar.SettingRequest)) *MockClientInterface_ConfigureGeneralSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]sonar.SettingRequest, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(sonar.SettingRequest)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockClientInterface_ConfigureGeneralSettings_Call) Return(_a0 error) *MockClientInterface_ConfigureGeneralSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_ConfigureGeneralSettings_Call) RunAndReturn(run func(...sonar.SettingRequest) error) *MockClientInterface_ConfigureGeneralSettings_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function with given fields: ctx, gr
func (_m *MockClientInterface) CreateGroup(ctx context.Context, gr *sonar.Group) error {
	ret := _m.Called(ctx, gr)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.Group) error); ok {
		r0 = rf(ctx, gr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockClientInterface_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - gr *sonar.Group
func (_e *MockClientInterface_Expecter) CreateGroup(ctx interface{}, gr interface{}) *MockClientInterface_CreateGroup_Call {
	return &MockClientInterface_CreateGroup_Call{Call: _e.mock.On("CreateGroup", ctx, gr)}
}

func (_c *MockClientInterface_CreateGroup_Call) Run(run func(ctx context.Context, gr *sonar.Group)) *MockClientInterface_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sonar.Group))
	})
	return _c
}

func (_c *MockClientInterface_CreateGroup_Call) Return(_a0 error) *MockClientInterface_CreateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_CreateGroup_Call) RunAndReturn(run func(context.Context, *sonar.Group) error) *MockClientInterface_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePermissionTemplate provides a mock function with given fields: ctx, tpl
func (_m *MockClientInterface) CreatePermissionTemplate(ctx context.Context, tpl *sonar.PermissionTemplateData) (*sonar.PermissionTemplate, error) {
	ret := _m.Called(ctx, tpl)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermissionTemplate")
	}

	var r0 *sonar.PermissionTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.PermissionTemplateData) (*sonar.PermissionTemplate, error)); ok {
		return rf(ctx, tpl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.PermissionTemplateData) *sonar.PermissionTemplate); ok {
		r0 = rf(ctx, tpl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.PermissionTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sonar.PermissionTemplateData) error); ok {
		r1 = rf(ctx, tpl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreatePermissionTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePermissionTemplate'
type MockClientInterface_CreatePermissionTemplate_Call struct {
	*mock.Call
}

// CreatePermissionTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - tpl *sonar.PermissionTemplateData
func (_e *MockClientInterface_Expecter) CreatePermissionTemplate(ctx interface{}, tpl interface{}) *MockClientInterface_CreatePermissionTemplate_Call {
	return &MockClientInterface_CreatePermissionTemplate_Call{Call: _e.mock.On("CreatePermissionTemplate", ctx, tpl)}
}

func (_c *MockClientInterface_CreatePermissionTemplate_Call) Run(run func(ctx context.Context, tpl *sonar.PermissionTemplateData)) *MockClientInterface_CreatePermissionTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sonar.PermissionTemplateData))
	})
	return _c
}

func (_c *MockClientInterface_CreatePermissionTemplate_Call) Return(_a0 *sonar.PermissionTemplate, _a1 error) *MockClientInterface_CreatePermissionTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreatePermissionTemplate_Call) RunAndReturn(run func(context.Context, *sonar.PermissionTemplateData) (*sonar.PermissionTemplate, error)) *MockClientInterface_CreatePermissionTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: ctx, project
func (_m *MockClientInterface) CreateProject(ctx context.Context, project *sonar.Project) error {
	ret := _m.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.Project) error); ok {
		r0 = rf(ctx, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type MockClientInterface_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - project *sonar.Project
func (_e *MockClientInterface_Expecter) CreateProject(ctx interface{}, project interface{}) *MockClientInterface_CreateProject_Call {
	return &MockClientInterface_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, project)}
}

func (_c *MockClientInterface_CreateProject_Call) Run(run func(ctx context.Context, project *sonar.Project)) *MockClientInterface_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sonar.Project))
	})
	return _c
}

func (_c *MockClientInterface_CreateProject_Call) Return(_a0 error) *MockClientInterface_CreateProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_CreateProject_Call) RunAndReturn(run func(context.Context, *sonar.Project) error) *MockClientInterface_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQualityGate provides a mock function with given fields: ctx, name
func (_m *MockClientInterface) CreateQualityGate(ctx context.Context, name string) (*sonar.QualityGate, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateQualityGate")
	}

	var r0 *sonar.QualityGate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sonar.QualityGate, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sonar.QualityGate); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.QualityGate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateQualityGate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQualityGate'
type MockClientInterface_CreateQualityGate_Call struct {
	*mock.Call
}

// CreateQualityGate is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClientInterface_Expecter) CreateQualityGate(ctx interface{}, name interface{}) *MockClientInterface_CreateQualityGate_Call {
	return &MockClientInterface_CreateQualityGate_Call{Call: _e.mock.On("CreateQualityGate", ctx, name)}
}

func (_c *MockClientInterface_CreateQualityGate_Call) Run(run func(ctx context.Context, name string)) *MockClientInterface_CreateQualityGate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_CreateQualityGate_Call) Return(_a0 *sonar.QualityGate, _a1 error) *MockClientInterface_CreateQualityGate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateQualityGate_Call) RunAndReturn(run func(context.Context, string) (*sonar.QualityGate, error)) *MockClientInterface_CreateQualityGate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQualityGateCondition provides a mock function with given fields: ctx, gate, condition
func (_m *MockClientInterface) CreateQualityGateCondition(ctx context.Context, gate string, condition sonar.QualityGateCondition) error {
	ret := _m.Called(ctx, gate, condition)

	if len(ret) == 0 {
		panic("no return value specified for CreateQualityGateCondition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, sonar.QualityGateCondition) error); ok {
		r0 = rf(ctx, gate, condition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_CreateQualityGateCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQualityGateCondition'
type MockClientInterface_CreateQualityGateCondition_Call struct {
	*mock.Call
}

// CreateQualityGateCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - gate string
//   - condition sonar.QualityGateCondition
func (_e *MockClientInterface_Expecter) CreateQualityGateCondition(ctx interface{}, gate interface{}, condition interface{}) *MockClientInterface_CreateQualityGateCondition_Call {
	return &MockClientInterface_CreateQualityGateCondition_Call{Call: _e.mock.On("CreateQualityGateCondition", ctx, gate, condition)}
}

func (_c *MockClientInterface_CreateQualityGateCondition_Call) Run(run func(ctx context.Context, gate string, condition sonar.QualityGateCondition)) *MockClientInterface_CreateQualityGateCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(sonar.QualityGateCondition))
	})
	return _c
}

func (_c *MockClientInterface_CreateQualityGateCondition_Call) Return(_a0 error) *MockClientInterface_CreateQualityGateCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_CreateQualityGateCondition_Call) RunAndReturn(run func(context.Context, string, sonar.QualityGateCondition) error) *MockClientInterface_CreateQualityGateCondition_Call {
	_c.Call.Return(run)
	return _c
}

// CreateQualityProfile provides a mock function with given fields: ctx, name, language
func (_m *MockClientInterface) CreateQualityProfile(ctx context.Context, name string, language string) (*sonar.QualityProfile, error) {
	ret := _m.Called(ctx, name, language)

	if len(ret) == 0 {
		panic("no return value specified for CreateQualityProfile")
	}

	var r0 *sonar.QualityProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*sonar.QualityProfile, error)); ok {
		return rf(ctx, name, language)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *sonar.QualityProfile); ok {
		r0 = rf(ctx, name, language)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.QualityProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_CreateQualityProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateQualityProfile'
type MockClientInterface_CreateQualityProfile_Call struct {
	*mock.Call
}

// CreateQualityProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - language string
func (_e *MockClientInterface_Expecter) CreateQualityProfile(ctx interface{}, name interface{}, language interface{}) *MockClientInterface_CreateQualityProfile_Call {
	return &MockClientInterface_CreateQualityProfile_Call{Call: _e.mock.On("CreateQualityProfile", ctx, name, language)}
}

func (_c *MockClientInterface_CreateQualityProfile_Call) Run(run func(ctx context.Context, name string, language string)) *MockClientInterface_CreateQualityProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_CreateQualityProfile_Call) Return(_a0 *sonar.QualityProfile, _a1 error) *MockClientInterface_CreateQualityProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_CreateQualityProfile_Call) RunAndReturn(run func(context.Context, string, string) (*sonar.QualityProfile, error)) *MockClientInterface_CreateQualityProfile_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, u
func (_m *MockClientInterface) CreateUser(ctx context.Context, u *sonar.User) error {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockClientInterface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - u *sonar.User
func (_e *MockClientInterface_Expecter) CreateUser(ctx interface{}, u interface{}) *MockClientInterface_CreateUser_Call {
	return &MockClientInterface_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, u)}
}

func (_c *MockClientInterface_CreateUser_Call) Run(run func(ctx context.Context, u *sonar.User)) *MockClientInterface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sonar.User))
	})
	return _c
}

func (_c *MockClientInterface_CreateUser_Call) Return(_a0 error) *MockClientInterface_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_CreateUser_Call) RunAndReturn(run func(context.Context, *sonar.User) error) *MockClientInterface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateQualityProfileRule provides a mock function with given fields: ctx, profileKey, ruleKey
func (_m *MockClientInterface) DeactivateQualityProfileRule(ctx context.Context, profileKey string, ruleKey string) error {
	ret := _m.Called(ctx, profileKey, ruleKey)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateQualityProfileRule")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, profileKey, ruleKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeactivateQualityProfileRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateQualityProfileRule'
type MockClientInterface_DeactivateQualityProfileRule_Call struct {
	*mock.Call
}

// DeactivateQualityProfileRule is a helper method to define mock.On call
//   - ctx context.Context
//   - profileKey string
//   - ruleKey string
func (_e *MockClientInterface_Expecter) DeactivateQualityProfileRule(ctx interface{}, profileKey interface{}, ruleKey interface{}) *MockClientInterface_DeactivateQualityProfileRule_Call {
	return &MockClientInterface_DeactivateQualityProfileRule_Call{Call: _e.mock.On("DeactivateQualityProfileRule", ctx, profileKey, ruleKey)}
}

func (_c *MockClientInterface_DeactivateQualityProfileRule_Call) Run(run func(ctx context.Context, profileKey string, ruleKey string)) *MockClientInterface_DeactivateQualityProfileRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeactivateQualityProfileRule_Call) Return(_a0 error) *MockClientInterface_DeactivateQualityProfileRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeactivateQualityProfileRule_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_DeactivateQualityProfileRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeactivateUser provides a mock function with given fields: ctx, userLogin
func (_m *MockClientInterface) DeactivateUser(ctx context.Context, userLogin string) error {
	ret := _m.Called(ctx, userLogin)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userLogin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeactivateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeactivateUser'
type MockClientInterface_DeactivateUser_Call struct {
	*mock.Call
}

// DeactivateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userLogin string
func (_e *MockClientInterface_Expecter) DeactivateUser(ctx interface{}, userLogin interface{}) *MockClientInterface_DeactivateUser_Call {
	return &MockClientInterface_DeactivateUser_Call{Call: _e.mock.On("DeactivateUser", ctx, userLogin)}
}

func (_c *MockClientInterface_DeactivateUser_Call) Run(run func(ctx context.Context, userLogin string)) *MockClientInterface_DeactivateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeactivateUser_Call) Return(_a0 error) *MockClientInterface_DeactivateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeactivateUser_Call) RunAndReturn(run func(context.Context, string) error) *MockClientInterface_DeactivateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: ctx, groupName
func (_m *MockClientInterface) DeleteGroup(ctx context.Context, groupName string) error {
	ret := _m.Called(ctx, groupName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockClientInterface_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupName string
func (_e *MockClientInterface_Expecter) DeleteGroup(ctx interface{}, groupName interface{}) *MockClientInterface_DeleteGroup_Call {
	return &MockClientInterface_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", ctx, groupName)}
}

func (_c *MockClientInterface_DeleteGroup_Call) Run(run func(ctx context.Context, groupName string)) *MockClientInterface_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeleteGroup_Call) Return(_a0 error) *MockClientInterface_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeleteGroup_Call) RunAndReturn(run func(context.Context, string) error) *MockClientInterface_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePermissionTemplate provides a mock function with given fields: ctx, id
func (_m *MockClientInterface) DeletePermissionTemplate(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePermissionTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeletePermissionTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePermissionTemplate'
type MockClientInterface_DeletePermissionTemplate_Call struct {
	*mock.Call
}

// DeletePermissionTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockClientInterface_Expecter) DeletePermissionTemplate(ctx interface{}, id interface{}) *MockClientInterface_DeletePermissionTemplate_Call {
	return &MockClientInterface_DeletePermissionTemplate_Call{Call: _e.mock.On("DeletePermissionTemplate", ctx, id)}
}

func (_c *MockClientInterface_DeletePermissionTemplate_Call) Run(run func(ctx context.Context, id string)) *MockClientInterface_DeletePermissionTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeletePermissionTemplate_Call) Return(_a0 error) *MockClientInterface_DeletePermissionTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeletePermissionTemplate_Call) RunAndReturn(run func(context.Context, string) error) *MockClientInterface_DeletePermissionTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function with given fields: ctx, projectKey
func (_m *MockClientInterface) DeleteProject(ctx context.Context, projectKey string) error {
	ret := _m.Called(ctx, projectKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, projectKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type MockClientInterface_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectKey string
func (_e *MockClientInterface_Expecter) DeleteProject(ctx interface{}, projectKey interface{}) *MockClientInterface_DeleteProject_Call {
	return &MockClientInterface_DeleteProject_Call{Call: _e.mock.On("DeleteProject", ctx, projectKey)}
}

func (_c *MockClientInterface_DeleteProject_Call) Run(run func(ctx context.Context, projectKey string)) *MockClientInterface_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeleteProject_Call) Return(_a0 error) *MockClientInterface_DeleteProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeleteProject_Call) RunAndReturn(run func(context.Context, string) error) *MockClientInterface_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQualityGate provides a mock function with given fields: ctx, name
func (_m *MockClientInterface) DeleteQualityGate(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQualityGate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeleteQualityGate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQualityGate'
type MockClientInterface_DeleteQualityGate_Call struct {
	*mock.Call
}

// DeleteQualityGate is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClientInterface_Expecter) DeleteQualityGate(ctx interface{}, name interface{}) *MockClientInterface_DeleteQualityGate_Call {
	return &MockClientInterface_DeleteQualityGate_Call{Call: _e.mock.On("DeleteQualityGate", ctx, name)}
}

func (_c *MockClientInterface_DeleteQualityGate_Call) Run(run func(ctx context.Context, name string)) *MockClientInterface_DeleteQualityGate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeleteQualityGate_Call) Return(_a0 error) *MockClientInterface_DeleteQualityGate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeleteQualityGate_Call) RunAndReturn(run func(context.Context, string) error) *MockClientInterface_DeleteQualityGate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQualityGateCondition provides a mock function with given fields: ctx, conditionId
func (_m *MockClientInterface) DeleteQualityGateCondition(ctx context.Context, conditionId string) error {
	ret := _m.Called(ctx, conditionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQualityGateCondition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, conditionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeleteQualityGateCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQualityGateCondition'
type MockClientInterface_DeleteQualityGateCondition_Call struct {
	*mock.Call
}

// DeleteQualityGateCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - conditionId string
func (_e *MockClientInterface_Expecter) DeleteQualityGateCondition(ctx interface{}, conditionId interface{}) *MockClientInterface_DeleteQualityGateCondition_Call {
	return &MockClientInterface_DeleteQualityGateCondition_Call{Call: _e.mock.On("DeleteQualityGateCondition", ctx, conditionId)}
}

func (_c *MockClientInterface_DeleteQualityGateCondition_Call) Run(run func(ctx context.Context, conditionId string)) *MockClientInterface_DeleteQualityGateCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeleteQualityGateCondition_Call) Return(_a0 error) *MockClientInterface_DeleteQualityGateCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeleteQualityGateCondition_Call) RunAndReturn(run func(context.Context, string) error) *MockClientInterface_DeleteQualityGateCondition_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQualityProfile provides a mock function with given fields: ctx, name, language
func (_m *MockClientInterface) DeleteQualityProfile(ctx context.Context, name string, language string) error {
	ret := _m.Called(ctx, name, language)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQualityProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, language)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_DeleteQualityProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQualityProfile'
type MockClientInterface_DeleteQualityProfile_Call struct {
	*mock.Call
}

// DeleteQualityProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - language string
func (_e *MockClientInterface_Expecter) DeleteQualityProfile(ctx interface{}, name interface{}, language interface{}) *MockClientInterface_DeleteQualityProfile_Call {
	return &MockClientInterface_DeleteQualityProfile_Call{Call: _e.mock.On("DeleteQualityProfile", ctx, name, language)}
}

func (_c *MockClientInterface_DeleteQualityProfile_Call) Run(run func(ctx context.Context, name string, language string)) *MockClientInterface_DeleteQualityProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_DeleteQualityProfile_Call) Return(_a0 error) *MockClientInterface_DeleteQualityProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_DeleteQualityProfile_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_DeleteQualityProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateUserToken provides a mock function with given fields: userName
func (_m *MockClientInterface) GenerateUserToken(userName string) (*string, error) {
	ret := _m.Called(userName)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUserToken")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*string, error)); ok {
		return rf(userName)
	}
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GenerateUserToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateUserToken'
type MockClientInterface_GenerateUserToken_Call struct {
	*mock.Call
}

// GenerateUserToken is a helper method to define mock.On call
//   - userName string
func (_e *MockClientInterface_Expecter) GenerateUserToken(userName interface{}) *MockClientInterface_GenerateUserToken_Call {
	return &MockClientInterface_GenerateUserToken_Call{Call: _e.mock.On("GenerateUserToken", userName)}
}

func (_c *MockClientInterface_GenerateUserToken_Call) Run(run func(userName string)) *MockClientInterface_GenerateUserToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClientInterface_GenerateUserToken_Call) Return(_a0 *string, _a1 error) *MockClientInterface_GenerateUserToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GenerateUserToken_Call) RunAndReturn(run func(string) (*string, error)) *MockClientInterface_GenerateUserToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function with given fields: ctx, groupName
func (_m *MockClientInterface) GetGroup(ctx context.Context, groupName string) (*sonar.Group, error) {
	ret := _m.Called(ctx, groupName)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *sonar.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sonar.Group, error)); ok {
		return rf(ctx, groupName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sonar.Group); ok {
		r0 = rf(ctx, groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type MockClientInterface_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupName string
func (_e *MockClientInterface_Expecter) GetGroup(ctx interface{}, groupName interface{}) *MockClientInterface_GetGroup_Call {
	return &MockClientInterface_GetGroup_Call{Call: _e.mock.On("GetGroup", ctx, groupName)}
}

func (_c *MockClientInterface_GetGroup_Call) Run(run func(ctx context.Context, groupName string)) *MockClientInterface_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetGroup_Call) Return(_a0 *sonar.Group, _a1 error) *MockClientInterface_GetGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetGroup_Call) RunAndReturn(run func(context.Context, string) (*sonar.Group, error)) *MockClientInterface_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupPermissions provides a mock function with given fields: ctx, groupName
func (_m *MockClientInterface) GetGroupPermissions(ctx context.Context, groupName string) ([]string, error) {
	ret := _m.Called(ctx, groupName)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupPermissions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, groupName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, groupName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, groupName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetGroupPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupPermissions'
type MockClientInterface_GetGroupPermissions_Call struct {
	*mock.Call
}

// GetGroupPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - groupName string
func (_e *MockClientInterface_Expecter) GetGroupPermissions(ctx interface{}, groupName interface{}) *MockClientInterface_GetGroupPermissions_Call {
	return &MockClientInterface_GetGroupPermissions_Call{Call: _e.mock.On("GetGroupPermissions", ctx, groupName)}
}

func (_c *MockClientInterface_GetGroupPermissions_Call) Run(run func(ctx context.Context, groupName string)) *MockClientInterface_GetGroupPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetGroupPermissions_Call) Return(_a0 []string, _a1 error) *MockClientInterface_GetGroupPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetGroupPermissions_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MockClientInterface_GetGroupPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionTemplate provides a mock function with given fields: ctx, name
func (_m *MockClientInterface) GetPermissionTemplate(ctx context.Context, name string) (*sonar.PermissionTemplate, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionTemplate")
	}

	var r0 *sonar.PermissionTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sonar.PermissionTemplate, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sonar.PermissionTemplate); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.PermissionTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetPermissionTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionTemplate'
type MockClientInterface_GetPermissionTemplate_Call struct {
	*mock.Call
}

// GetPermissionTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClientInterface_Expecter) GetPermissionTemplate(ctx interface{}, name interface{}) *MockClientInterface_GetPermissionTemplate_Call {
	return &MockClientInterface_GetPermissionTemplate_Call{Call: _e.mock.On("GetPermissionTemplate", ctx, name)}
}

func (_c *MockClientInterface_GetPermissionTemplate_Call) Run(run func(ctx context.Context, name string)) *MockClientInterface_GetPermissionTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetPermissionTemplate_Call) Return(_a0 *sonar.PermissionTemplate, _a1 error) *MockClientInterface_GetPermissionTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetPermissionTemplate_Call) RunAndReturn(run func(context.Context, string) (*sonar.PermissionTemplate, error)) *MockClientInterface_GetPermissionTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// GetPermissionTemplateGroups provides a mock function with given fields: ctx, templateID
func (_m *MockClientInterface) GetPermissionTemplateGroups(ctx context.Context, templateID string) (map[string][]string, error) {
	ret := _m.Called(ctx, templateID)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionTemplateGroups")
	}

	var r0 map[string][]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string][]string, error)); ok {
		return rf(ctx, templateID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string][]string); ok {
		r0 = rf(ctx, templateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, templateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetPermissionTemplateGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPermissionTemplateGroups'
type MockClientInterface_GetPermissionTemplateGroups_Call struct {
	*mock.Call
}

// GetPermissionTemplateGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - templateID string
func (_e *MockClientInterface_Expecter) GetPermissionTemplateGroups(ctx interface{}, templateID interface{}) *MockClientInterface_GetPermissionTemplateGroups_Call {
	return &MockClientInterface_GetPermissionTemplateGroups_Call{Call: _e.mock.On("GetPermissionTemplateGroups", ctx, templateID)}
}

func (_c *MockClientInterface_GetPermissionTemplateGroups_Call) Run(run func(ctx context.Context, templateID string)) *MockClientInterface_GetPermissionTemplateGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetPermissionTemplateGroups_Call) Return(_a0 map[string][]string, _a1 error) *MockClientInterface_GetPermissionTemplateGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetPermissionTemplateGroups_Call) RunAndReturn(run func(context.Context, string) (map[string][]string, error)) *MockClientInterface_GetPermissionTemplateGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: ctx, projectKey
func (_m *MockClientInterface) GetProject(ctx context.Context, projectKey string) (*sonar.Project, error) {
	ret := _m.Called(ctx, projectKey)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *sonar.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sonar.Project, error)); ok {
		return rf(ctx, projectKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sonar.Project); ok {
		r0 = rf(ctx, projectKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockClientInterface_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - projectKey string
func (_e *MockClientInterface_Expecter) GetProject(ctx interface{}, projectKey interface{}) *MockClientInterface_GetProject_Call {
	return &MockClientInterface_GetProject_Call{Call: _e.mock.On("GetProject", ctx, projectKey)}
}

func (_c *MockClientInterface_GetProject_Call) Run(run func(ctx context.Context, projectKey string)) *MockClientInterface_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetProject_Call) Return(_a0 *sonar.Project, _a1 error) *MockClientInterface_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetProject_Call) RunAndReturn(run func(context.Context, string) (*sonar.Project, error)) *MockClientInterface_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetQualityGate provides a mock function with given fields: ctx, name
func (_m *MockClientInterface) GetQualityGate(ctx context.Context, name string) (*sonar.QualityGate, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetQualityGate")
	}

	var r0 *sonar.QualityGate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sonar.QualityGate, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sonar.QualityGate); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.QualityGate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetQualityGate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQualityGate'
type MockClientInterface_GetQualityGate_Call struct {
	*mock.Call
}

// GetQualityGate is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClientInterface_Expecter) GetQualityGate(ctx interface{}, name interface{}) *MockClientInterface_GetQualityGate_Call {
	return &MockClientInterface_GetQualityGate_Call{Call: _e.mock.On("GetQualityGate", ctx, name)}
}

func (_c *MockClientInterface_GetQualityGate_Call) Run(run func(ctx context.Context, name string)) *MockClientInterface_GetQualityGate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetQualityGate_Call) Return(_a0 *sonar.QualityGate, _a1 error) *MockClientInterface_GetQualityGate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetQualityGate_Call) RunAndReturn(run func(context.Context, string) (*sonar.QualityGate, error)) *MockClientInterface_GetQualityGate_Call {
	_c.Call.Return(run)
	return _c
}

// GetQualityProfile provides a mock function with given fields: ctx, name
func (_m *MockClientInterface) GetQualityProfile(ctx context.Context, name string) (*sonar.QualityProfile, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetQualityProfile")
	}

	var r0 *sonar.QualityProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sonar.QualityProfile, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sonar.QualityProfile); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.QualityProfile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetQualityProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQualityProfile'
type MockClientInterface_GetQualityProfile_Call struct {
	*mock.Call
}

// GetQualityProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClientInterface_Expecter) GetQualityProfile(ctx interface{}, name interface{}) *MockClientInterface_GetQualityProfile_Call {
	return &MockClientInterface_GetQualityProfile_Call{Call: _e.mock.On("GetQualityProfile", ctx, name)}
}

func (_c *MockClientInterface_GetQualityProfile_Call) Run(run func(ctx context.Context, name string)) *MockClientInterface_GetQualityProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetQualityProfile_Call) Return(_a0 *sonar.QualityProfile, _a1 error) *MockClientInterface_GetQualityProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetQualityProfile_Call) RunAndReturn(run func(context.Context, string) (*sonar.QualityProfile, error)) *MockClientInterface_GetQualityProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetQualityProfileActiveRules provides a mock function with given fields: ctx, profileKey
func (_m *MockClientInterface) GetQualityProfileActiveRules(ctx context.Context, profileKey string) ([]sonar.Rule, error) {
	ret := _m.Called(ctx, profileKey)

	if len(ret) == 0 {
		panic("no return value specified for GetQualityProfileActiveRules")
	}

	var r0 []sonar.Rule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]sonar.Rule, error)); ok {
		return rf(ctx, profileKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []sonar.Rule); ok {
		r0 = rf(ctx, profileKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sonar.Rule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, profileKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetQualityProfileActiveRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQualityProfileActiveRules'
type MockClientInterface_GetQualityProfileActiveRules_Call struct {
	*mock.Call
}

// GetQualityProfileActiveRules is a helper method to define mock.On call
//   - ctx context.Context
//   - profileKey string
func (_e *MockClientInterface_Expecter) GetQualityProfileActiveRules(ctx interface{}, profileKey interface{}) *MockClientInterface_GetQualityProfileActiveRules_Call {
	return &MockClientInterface_GetQualityProfileActiveRules_Call{Call: _e.mock.On("GetQualityProfileActiveRules", ctx, profileKey)}
}

func (_c *MockClientInterface_GetQualityProfileActiveRules_Call) Run(run func(ctx context.Context, profileKey string)) *MockClientInterface_GetQualityProfileActiveRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetQualityProfileActiveRules_Call) Return(_a0 []sonar.Rule, _a1 error) *MockClientInterface_GetQualityProfileActiveRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetQualityProfileActiveRules_Call) RunAndReturn(run func(context.Context, string) ([]sonar.Rule, error)) *MockClientInterface_GetQualityProfileActiveRules_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByLogin provides a mock function with given fields: ctx, userLogin
func (_m *MockClientInterface) GetUserByLogin(ctx context.Context, userLogin string) (*sonar.User, error) {
	ret := _m.Called(ctx, userLogin)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 *sonar.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*sonar.User, error)); ok {
		return rf(ctx, userLogin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *sonar.User); ok {
		r0 = rf(ctx, userLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetUserByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByLogin'
type MockClientInterface_GetUserByLogin_Call struct {
	*mock.Call
}

// GetUserByLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - userLogin string
func (_e *MockClientInterface_Expecter) GetUserByLogin(ctx interface{}, userLogin interface{}) *MockClientInterface_GetUserByLogin_Call {
	return &MockClientInterface_GetUserByLogin_Call{Call: _e.mock.On("GetUserByLogin", ctx, userLogin)}
}

func (_c *MockClientInterface_GetUserByLogin_Call) Run(run func(ctx context.Context, userLogin string)) *MockClientInterface_GetUserByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetUserByLogin_Call) Return(_a0 *sonar.User, _a1 error) *MockClientInterface_GetUserByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetUserByLogin_Call) RunAndReturn(run func(context.Context, string) (*sonar.User, error)) *MockClientInterface_GetUserByLogin_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserGroups provides a mock function with given fields: ctx, userLogin
func (_m *MockClientInterface) GetUserGroups(ctx context.Context, userLogin string) ([]sonar.Group, error) {
	ret := _m.Called(ctx, userLogin)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGroups")
	}

	var r0 []sonar.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]sonar.Group, error)); ok {
		return rf(ctx, userLogin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []sonar.Group); ok {
		r0 = rf(ctx, userLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sonar.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetUserGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserGroups'
type MockClientInterface_GetUserGroups_Call struct {
	*mock.Call
}

// GetUserGroups is a helper method to define mock.On call
//   - ctx context.Context
//   - userLogin string
func (_e *MockClientInterface_Expecter) GetUserGroups(ctx interface{}, userLogin interface{}) *MockClientInterface_GetUserGroups_Call {
	return &MockClientInterface_GetUserGroups_Call{Call: _e.mock.On("GetUserGroups", ctx, userLogin)}
}

func (_c *MockClientInterface_GetUserGroups_Call) Run(run func(ctx context.Context, userLogin string)) *MockClientInterface_GetUserGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetUserGroups_Call) Return(_a0 []sonar.Group, _a1 error) *MockClientInterface_GetUserGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetUserGroups_Call) RunAndReturn(run func(context.Context, string) ([]sonar.Group, error)) *MockClientInterface_GetUserGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPermissions provides a mock function with given fields: ctx, userLogin
func (_m *MockClientInterface) GetUserPermissions(ctx context.Context, userLogin string) ([]string, error) {
	ret := _m.Called(ctx, userLogin)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPermissions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, userLogin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, userLogin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userLogin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetUserPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPermissions'
type MockClientInterface_GetUserPermissions_Call struct {
	*mock.Call
}

// GetUserPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - userLogin string
func (_e *MockClientInterface_Expecter) GetUserPermissions(ctx interface{}, userLogin interface{}) *MockClientInterface_GetUserPermissions_Call {
	return &MockClientInterface_GetUserPermissions_Call{Call: _e.mock.On("GetUserPermissions", ctx, userLogin)}
}

func (_c *MockClientInterface_GetUserPermissions_Call) Run(run func(ctx context.Context, userLogin string)) *MockClientInterface_GetUserPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetUserPermissions_Call) Return(_a0 []string, _a1 error) *MockClientInterface_GetUserPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetUserPermissions_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MockClientInterface_GetUserPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserToken provides a mock function with given fields: ctx, userLogin, tokenName
func (_m *MockClientInterface) GetUserToken(ctx context.Context, userLogin string, tokenName string) (*sonar.UserToken, error) {
	ret := _m.Called(ctx, userLogin, tokenName)

	if len(ret) == 0 {
		panic("no return value specified for GetUserToken")
	}

	var r0 *sonar.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*sonar.UserToken, error)); ok {
		return rf(ctx, userLogin, tokenName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *sonar.UserToken); ok {
		r0 = rf(ctx, userLogin, tokenName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.UserToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userLogin, tokenName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_GetUserToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserToken'
type MockClientInterface_GetUserToken_Call struct {
	*mock.Call
}

// GetUserToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userLogin string
//   - tokenName string
func (_e *MockClientInterface_Expecter) GetUserToken(ctx interface{}, userLogin interface{}, tokenName interface{}) *MockClientInterface_GetUserToken_Call {
	return &MockClientInterface_GetUserToken_Call{Call: _e.mock.On("GetUserToken", ctx, userLogin, tokenName)}
}

func (_c *MockClientInterface_GetUserToken_Call) Run(run func(ctx context.Context, userLogin string, tokenName string)) *MockClientInterface_GetUserToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_GetUserToken_Call) Return(_a0 *sonar.UserToken, _a1 error) *MockClientInterface_GetUserToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_GetUserToken_Call) RunAndReturn(run func(context.Context, string, string) (*sonar.UserToken, error)) *MockClientInterface_GetUserToken_Call {
	_c.Call.Return(run)
	return _c
}

// Health provides a mock function with given fields: ctx
func (_m *MockClientInterface) Health(ctx context.Context) (*sonar.SystemHealth, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Health")
	}

	var r0 *sonar.SystemHealth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sonar.SystemHealth, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sonar.SystemHealth); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sonar.SystemHealth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientInterface_Health_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Health'
type MockClientInterface_Health_Call struct {
	*mock.Call
}

// Health is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClientInterface_Expecter) Health(ctx interface{}) *MockClientInterface_Health_Call {
	return &MockClientInterface_Health_Call{Call: _e.mock.On("Health", ctx)}
}

func (_c *MockClientInterface_Health_Call) Run(run func(ctx context.Context)) *MockClientInterface_Health_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClientInterface_Health_Call) Return(_a0 *sonar.SystemHealth, _a1 error) *MockClientInterface_Health_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientInterface_Health_Call) RunAndReturn(run func(context.Context) (*sonar.SystemHealth, error)) *MockClientInterface_Health_Call {
	_c.Call.Return(run)
	return _c
}

// InstallPlugins provides a mock function with given fields: plugins
func (_m *MockClientInterface) InstallPlugins(plugins []string) error {
	ret := _m.Called(plugins)

	if len(ret) == 0 {
		panic("no return value specified for InstallPlugins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(plugins)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_InstallPlugins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallPlugins'
type MockClientInterface_InstallPlugins_Call struct {
	*mock.Call
}

// InstallPlugins is a helper method to define mock.On call
//   - plugins []string
func (_e *MockClientInterface_Expecter) InstallPlugins(plugins interface{}) *MockClientInterface_InstallPlugins_Call {
	return &MockClientInterface_InstallPlugins_Call{Call: _e.mock.On("InstallPlugins", plugins)}
}

func (_c *MockClientInterface_InstallPlugins_Call) Run(run func(plugins []string)) *MockClientInterface_InstallPlugins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockClientInterface_InstallPlugins_Call) Return(_a0 error) *MockClientInterface_InstallPlugins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_InstallPlugins_Call) RunAndReturn(run func([]string) error) *MockClientInterface_InstallPlugins_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveGroupFromPermissionTemplate provides a mock function with given fields: ctx, templateID, groupName, permission
func (_m *MockClientInterface) RemoveGroupFromPermissionTemplate(ctx context.Context, templateID string, groupName string, permission string) error {
	ret := _m.Called(ctx, templateID, groupName, permission)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupFromPermissionTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, templateID, groupName, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_RemoveGroupFromPermissionTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveGroupFromPermissionTemplate'
type MockClientInterface_RemoveGroupFromPermissionTemplate_Call struct {
	*mock.Call
}

// RemoveGroupFromPermissionTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - templateID string
//   - groupName string
//   - permission string
func (_e *MockClientInterface_Expecter) RemoveGroupFromPermissionTemplate(ctx interface{}, templateID interface{}, groupName interface{}, permission interface{}) *MockClientInterface_RemoveGroupFromPermissionTemplate_Call {
	return &MockClientInterface_RemoveGroupFromPermissionTemplate_Call{Call: _e.mock.On("RemoveGroupFromPermissionTemplate", ctx, templateID, groupName, permission)}
}

func (_c *MockClientInterface_RemoveGroupFromPermissionTemplate_Call) Run(run func(ctx context.Context, templateID string, groupName string, permission string)) *MockClientInterface_RemoveGroupFromPermissionTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClientInterface_RemoveGroupFromPermissionTemplate_Call) Return(_a0 error) *MockClientInterface_RemoveGroupFromPermissionTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_RemoveGroupFromPermissionTemplate_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockClientInterface_RemoveGroupFromPermissionTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionFromGroup provides a mock function with given fields: ctx, groupName, permission
func (_m *MockClientInterface) RemovePermissionFromGroup(ctx context.Context, groupName string, permission string) error {
	ret := _m.Called(ctx, groupName, permission)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionFromGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, groupName, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_RemovePermissionFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionFromGroup'
type MockClientInterface_RemovePermissionFromGroup_Call struct {
	*mock.Call
}

// RemovePermissionFromGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - groupName string
//   - permission string
func (_e *MockClientInterface_Expecter) RemovePermissionFromGroup(ctx interface{}, groupName interface{}, permission interface{}) *MockClientInterface_RemovePermissionFromGroup_Call {
	return &MockClientInterface_RemovePermissionFromGroup_Call{Call: _e.mock.On("RemovePermissionFromGroup", ctx, groupName, permission)}
}

func (_c *MockClientInterface_RemovePermissionFromGroup_Call) Run(run func(ctx context.Context, groupName string, permission string)) *MockClientInterface_RemovePermissionFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_RemovePermissionFromGroup_Call) Return(_a0 error) *MockClientInterface_RemovePermissionFromGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_RemovePermissionFromGroup_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_RemovePermissionFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionFromUser provides a mock function with given fields: ctx, userLogin, permission
func (_m *MockClientInterface) RemovePermissionFromUser(ctx context.Context, userLogin string, permission string) error {
	ret := _m.Called(ctx, userLogin, permission)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionFromUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userLogin, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_RemovePermissionFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionFromUser'
type MockClientInterface_RemovePermissionFromUser_Call struct {
	*mock.Call
}

// RemovePermissionFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userLogin string
//   - permission string
func (_e *MockClientInterface_Expecter) RemovePermissionFromUser(ctx interface{}, userLogin interface{}, permission interface{}) *MockClientInterface_RemovePermissionFromUser_Call {
	return &MockClientInterface_RemovePermissionFromUser_Call{Call: _e.mock.On("RemovePermissionFromUser", ctx, userLogin, permission)}
}

func (_c *MockClientInterface_RemovePermissionFromUser_Call) Run(run func(ctx context.Context, userLogin string, permission string)) *MockClientInterface_RemovePermissionFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_RemovePermissionFromUser_Call) Return(_a0 error) *MockClientInterface_RemovePermissionFromUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_RemovePermissionFromUser_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_RemovePermissionFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromGroup provides a mock function with given fields: ctx, userLogin, groupName
func (_m *MockClientInterface) RemoveUserFromGroup(ctx context.Context, userLogin string, groupName string) error {
	ret := _m.Called(ctx, userLogin, groupName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userLogin, groupName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_RemoveUserFromGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromGroup'
type MockClientInterface_RemoveUserFromGroup_Call struct {
	*mock.Call
}

// RemoveUserFromGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - userLogin string
//   - groupName string
func (_e *MockClientInterface_Expecter) RemoveUserFromGroup(ctx interface{}, userLogin interface{}, groupName interface{}) *MockClientInterface_RemoveUserFromGroup_Call {
	return &MockClientInterface_RemoveUserFromGroup_Call{Call: _e.mock.On("RemoveUserFromGroup", ctx, userLogin, groupName)}
}

func (_c *MockClientInterface_RemoveUserFromGroup_Call) Run(run func(ctx context.Context, userLogin string, groupName string)) *MockClientInterface_RemoveUserFromGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_RemoveUserFromGroup_Call) Return(_a0 error) *MockClientInterface_RemoveUserFromGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_RemoveUserFromGroup_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_RemoveUserFromGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ResetSettings provides a mock function with given fields: ctx, settingsKeys
func (_m *MockClientInterface) ResetSettings(ctx context.Context, settingsKeys []string) error {
	ret := _m.Called(ctx, settingsKeys)

	if len(ret) == 0 {
		panic("no return value specified for ResetSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, settingsKeys)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_ResetSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetSettings'
type MockClientInterface_ResetSettings_Call struct {
	*mock.Call
}

// ResetSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - settingsKeys []string
func (_e *MockClientInterface_Expecter) ResetSettings(ctx interface{}, settingsKeys interface{}) *MockClientInterface_ResetSettings_Call {
	return &MockClientInterface_ResetSettings_Call{Call: _e.mock.On("ResetSettings", ctx, settingsKeys)}
}

func (_c *MockClientInterface_ResetSettings_Call) Run(run func(ctx context.Context, settingsKeys []string)) *MockClientInterface_ResetSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockClientInterface_ResetSettings_Call) Return(_a0 error) *MockClientInterface_ResetSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_ResetSettings_Call) RunAndReturn(run func(context.Context, []string) error) *MockClientInterface_ResetSettings_Call {
	_c.Call.Return(run)
	return _c
}

// SetAsDefaultQualityGate provides a mock function with given fields: ctx, name
func (_m *MockClientInterface) SetAsDefaultQualityGate(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for SetAsDefaultQualityGate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_SetAsDefaultQualityGate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAsDefaultQualityGate'
type MockClientInterface_SetAsDefaultQualityGate_Call struct {
	*mock.Call
}

// SetAsDefaultQualityGate is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClientInterface_Expecter) SetAsDefaultQualityGate(ctx interface{}, name interface{}) *MockClientInterface_SetAsDefaultQualityGate_Call {
	return &MockClientInterface_SetAsDefaultQualityGate_Call{Call: _e.mock.On("SetAsDefaultQualityGate", ctx, name)}
}

func (_c *MockClientInterface_SetAsDefaultQualityGate_Call) Run(run func(ctx context.Context, name string)) *MockClientInterface_SetAsDefaultQualityGate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_SetAsDefaultQualityGate_Call) Return(_a0 error) *MockClientInterface_SetAsDefaultQualityGate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_SetAsDefaultQualityGate_Call) RunAndReturn(run func(context.Context, string) error) *MockClientInterface_SetAsDefaultQualityGate_Call {
	_c.Call.Return(run)
	return _c
}

// SetAsDefaultQualityProfile provides a mock function with given fields: ctx, name, language
func (_m *MockClientInterface) SetAsDefaultQualityProfile(ctx context.Context, name string, language string) error {
	ret := _m.Called(ctx, name, language)

	if len(ret) == 0 {
		panic("no return value specified for SetAsDefaultQualityProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, name, language)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_SetAsDefaultQualityProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAsDefaultQualityProfile'
type MockClientInterface_SetAsDefaultQualityProfile_Call struct {
	*mock.Call
}

// SetAsDefaultQualityProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - language string
func (_e *MockClientInterface_Expecter) SetAsDefaultQualityProfile(ctx interface{}, name interface{}, language interface{}) *MockClientInterface_SetAsDefaultQualityProfile_Call {
	return &MockClientInterface_SetAsDefaultQualityProfile_Call{Call: _e.mock.On("SetAsDefaultQualityProfile", ctx, name, language)}
}

func (_c *MockClientInterface_SetAsDefaultQualityProfile_Call) Run(run func(ctx context.Context, name string, language string)) *MockClientInterface_SetAsDefaultQualityProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClientInterface_SetAsDefaultQualityProfile_Call) Return(_a0 error) *MockClientInterface_SetAsDefaultQualityProfile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_SetAsDefaultQualityProfile_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClientInterface_SetAsDefaultQualityProfile_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultPermissionTemplate provides a mock function with given fields: ctx, name
func (_m *MockClientInterface) SetDefaultPermissionTemplate(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultPermissionTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_SetDefaultPermissionTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultPermissionTemplate'
type MockClientInterface_SetDefaultPermissionTemplate_Call struct {
	*mock.Call
}

// SetDefaultPermissionTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockClientInterface_Expecter) SetDefaultPermissionTemplate(ctx interface{}, name interface{}) *MockClientInterface_SetDefaultPermissionTemplate_Call {
	return &MockClientInterface_SetDefaultPermissionTemplate_Call{Call: _e.mock.On("SetDefaultPermissionTemplate", ctx, name)}
}

func (_c *MockClientInterface_SetDefaultPermissionTemplate_Call) Run(run func(ctx context.Context, name string)) *MockClientInterface_SetDefaultPermissionTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientInterface_SetDefaultPermissionTemplate_Call) Return(_a0 error) *MockClientInterface_SetDefaultPermissionTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_SetDefaultPermissionTemplate_Call) RunAndReturn(run func(context.Context, string) error) *MockClientInterface_SetDefaultPermissionTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// SetProjectsDefaultVisibility provides a mock function with given fields: visibility
func (_m *MockClientInterface) SetProjectsDefaultVisibility(visibility string) error {
	ret := _m.Called(visibility)

	if len(ret) == 0 {
		panic("no return value specified for SetProjectsDefaultVisibility")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(visibility)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_SetProjectsDefaultVisibility_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetProjectsDefaultVisibility'
type MockClientInterface_SetProjectsDefaultVisibility_Call struct {
	*mock.Call
}

// SetProjectsDefaultVisibility is a helper method to define mock.On call
//   - visibility string
func (_e *MockClientInterface_Expecter) SetProjectsDefaultVisibility(visibility interface{}) *MockClientInterface_SetProjectsDefaultVisibility_Call {
	return &MockClientInterface_SetProjectsDefaultVisibility_Call{Call: _e.mock.On("SetProjectsDefaultVisibility", visibility)}
}

func (_c *MockClientInterface_SetProjectsDefaultVisibility_Call) Run(run func(visibility string)) *MockClientInterface_SetProjectsDefaultVisibility_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClientInterface_SetProjectsDefaultVisibility_Call) Return(_a0 error) *MockClientInterface_SetProjectsDefaultVisibility_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_SetProjectsDefaultVisibility_Call) RunAndReturn(run func(string) error) *MockClientInterface_SetProjectsDefaultVisibility_Call {
	_c.Call.Return(run)
	return _c
}

// SetSetting provides a mock function with given fields: ctx, setting
func (_m *MockClientInterface) SetSetting(ctx context.Context, setting url.Values) error {
	ret := _m.Called(ctx, setting)

	if len(ret) == 0 {
		panic("no return value specified for SetSetting")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, url.Values) error); ok {
		r0 = rf(ctx, setting)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_SetSetting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSetting'
type MockClientInterface_SetSetting_Call struct {
	*mock.Call
}

// SetSetting is a helper method to define mock.On call
//   - ctx context.Context
//   - setting url.Values
func (_e *MockClientInterface_Expecter) SetSetting(ctx interface{}, setting interface{}) *MockClientInterface_SetSetting_Call {
	return &MockClientInterface_SetSetting_Call{Call: _e.mock.On("SetSetting", ctx, setting)}
}

func (_c *MockClientInterface_SetSetting_Call) Run(run func(ctx context.Context, setting url.Values)) *MockClientInterface_SetSetting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(url.Values))
	})
	return _c
}

func (_c *MockClientInterface_SetSetting_Call) Return(_a0 error) *MockClientInterface_SetSetting_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_SetSetting_Call) RunAndReturn(run func(context.Context, url.Values) error) *MockClientInterface_SetSetting_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function with given fields: ctx, currentName, group
func (_m *MockClientInterface) UpdateGroup(ctx context.Context, currentName string, group *sonar.Group) error {
	ret := _m.Called(ctx, currentName, group)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *sonar.Group) error); ok {
		r0 = rf(ctx, currentName, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type MockClientInterface_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - currentName string
//   - group *sonar.Group
func (_e *MockClientInterface_Expecter) UpdateGroup(ctx interface{}, currentName interface{}, group interface{}) *MockClientInterface_UpdateGroup_Call {
	return &MockClientInterface_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", ctx, currentName, group)}
}

func (_c *MockClientInterface_UpdateGroup_Call) Run(run func(ctx context.Context, currentName string, group *sonar.Group)) *MockClientInterface_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*sonar.Group))
	})
	return _c
}

func (_c *MockClientInterface_UpdateGroup_Call) Return(_a0 error) *MockClientInterface_UpdateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_UpdateGroup_Call) RunAndReturn(run func(context.Context, string, *sonar.Group) error) *MockClientInterface_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePermissionTemplate provides a mock function with given fields: ctx, tpl
func (_m *MockClientInterface) UpdatePermissionTemplate(ctx context.Context, tpl *sonar.PermissionTemplate) error {
	ret := _m.Called(ctx, tpl)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissionTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.PermissionTemplate) error); ok {
		r0 = rf(ctx, tpl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_UpdatePermissionTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePermissionTemplate'
type MockClientInterface_UpdatePermissionTemplate_Call struct {
	*mock.Call
}

// UpdatePermissionTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - tpl *sonar.PermissionTemplate
func (_e *MockClientInterface_Expecter) UpdatePermissionTemplate(ctx interface{}, tpl interface{}) *MockClientInterface_UpdatePermissionTemplate_Call {
	return &MockClientInterface_UpdatePermissionTemplate_Call{Call: _e.mock.On("UpdatePermissionTemplate", ctx, tpl)}
}

func (_c *MockClientInterface_UpdatePermissionTemplate_Call) Run(run func(ctx context.Context, tpl *sonar.PermissionTemplate)) *MockClientInterface_UpdatePermissionTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sonar.PermissionTemplate))
	})
	return _c
}

func (_c *MockClientInterface_UpdatePermissionTemplate_Call) Return(_a0 error) *MockClientInterface_UpdatePermissionTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_UpdatePermissionTemplate_Call) RunAndReturn(run func(context.Context, *sonar.PermissionTemplate) error) *MockClientInterface_UpdatePermissionTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: ctx, project
func (_m *MockClientInterface) UpdateProject(ctx context.Context, project *sonar.Project) error {
	ret := _m.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.Project) error); ok {
		r0 = rf(ctx, project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type MockClientInterface_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - project *sonar.Project
func (_e *MockClientInterface_Expecter) UpdateProject(ctx interface{}, project interface{}) *MockClientInterface_UpdateProject_Call {
	return &MockClientInterface_UpdateProject_Call{Call: _e.mock.On("UpdateProject", ctx, project)}
}

func (_c *MockClientInterface_UpdateProject_Call) Run(run func(ctx context.Context, project *sonar.Project)) *MockClientInterface_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sonar.Project))
	})
	return _c
}

func (_c *MockClientInterface_UpdateProject_Call) Return(_a0 error) *MockClientInterface_UpdateProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_UpdateProject_Call) RunAndReturn(run func(context.Context, *sonar.Project) error) *MockClientInterface_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateQualityGateCondition provides a mock function with given fields: ctx, condition
func (_m *MockClientInterface) UpdateQualityGateCondition(ctx context.Context, condition sonar.QualityGateCondition) error {
	ret := _m.Called(ctx, condition)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQualityGateCondition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, sonar.QualityGateCondition) error); ok {
		r0 = rf(ctx, condition)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_UpdateQualityGateCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateQualityGateCondition'
type MockClientInterface_UpdateQualityGateCondition_Call struct {
	*mock.Call
}

// UpdateQualityGateCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - condition sonar.QualityGateCondition
func (_e *MockClientInterface_Expecter) UpdateQualityGateCondition(ctx interface{}, condition interface{}) *MockClientInterface_UpdateQualityGateCondition_Call {
	return &MockClientInterface_UpdateQualityGateCondition_Call{Call: _e.mock.On("UpdateQualityGateCondition", ctx, condition)}
}

func (_c *MockClientInterface_UpdateQualityGateCondition_Call) Run(run func(ctx context.Context, condition sonar.QualityGateCondition)) *MockClientInterface_UpdateQualityGateCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sonar.QualityGateCondition))
	})
	return _c
}

func (_c *MockClientInterface_UpdateQualityGateCondition_Call) Return(_a0 error) *MockClientInterface_UpdateQualityGateCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_UpdateQualityGateCondition_Call) RunAndReturn(run func(context.Context, sonar.QualityGateCondition) error) *MockClientInterface_UpdateQualityGateCondition_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, u
func (_m *MockClientInterface) UpdateUser(ctx context.Context, u *sonar.User) error {
	ret := _m.Called(ctx, u)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sonar.User) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClientInterface_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockClientInterface_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - u *sonar.User
func (_e *MockClientInterface_Expecter) UpdateUser(ctx interface{}, u interface{}) *MockClientInterface_UpdateUser_Call {
	return &MockClientInterface_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, u)}
}

func (_c *MockClientInterface_UpdateUser_Call) Run(run func(ctx context.Context, u *sonar.User)) *MockClientInterface_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sonar.User))
	})
	return _c
}

func (_c *MockClientInterface_UpdateUser_Call) Return(_a0 error) *MockClientInterface_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClientInterface_UpdateUser_Call) RunAndReturn(run func(context.Context, *sonar.User) error) *MockClientInterface_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientInterface creates a new instance of MockClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientInterface {
	mock := &MockClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
