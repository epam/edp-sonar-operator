{{if and (eq .Values.global.platform "openshift") (eq .Values.global.openshift.deploymentType "deploymentConfigs")}}
{{if .Values.sonar.deploy}}
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  name: sonar
  labels:
    app: sonar
    {{- include "sonar-operator.labels" . | nindent 4 }}
  {{- with .Values.sonar.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    app: sonar
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: sonar
    spec:
      {{- if .Values.sonar.imagePullSecrets}}
      imagePullSecrets:
        {{- range .Values.sonar.imagePullSecrets }}
        - {{. -}}
        {{- end -}}
      {{end}}
      containers:
        - args:
            - -Dsonar.search.javaAdditionalOpts=-Dnode.store.allow_mmap=false
          env:
            - name: SONARQUBE_JDBC_USERNAME
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: sonar-db
            - name: SONARQUBE_JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: sonar-db
            - name: SONARQUBE_JDBC_URL
              value: jdbc:postgresql://sonar-db/sonar
            - name: sonar.web.context
              value: {{if .Values.sonar.basePath}}"/{{.Values.sonar.basePath}}"{{else}}/{{end}}
          image: "{{.Values.sonar.image}}:{{.Values.sonar.version}}"
          imagePullPolicy: "{{ .Values.sonar.imagePullPolicy }}"
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          name: sonar
          ports:
            - containerPort: 9000
              name: sonar
              protocol: TCP
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              memory: 500Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: {{ .Values.sonar.sonarqubeFolder }}/extensions/plugins
              name: data
              subPath: extensions/plugins
            {{- if .Values.sonar.plugins.install }}
            - mountPath: {{ .Values.sonar.sonarqubeFolder }}/extensions/downloads
              name: data
              subPath: extensions/downloads
            {{- end }}
            {{- if .Values.sonar.plugins.lib }}
            {{- range $index, $val := .Values.sonar.plugins.lib }}
            - mountPath: {{ $.Values.sonar.sonarqubeFolder }}/lib/common/{{ $val }}
              name: data
              subPath: lib/common/{{ $val }}
            {{- end }}
            {{- end }}
      dnsPolicy: ClusterFirst
      initContainers:
      {{- if .Values.sonar.plugins.install }}
        - name: install-plugins
          image: {{ default "rjkernick/alpine-wget:latest" .Values.sonar.plugins.image }}
          imagePullPolicy: {{ .Values.sonar.imagePullPolicy }}
          command: ["sh",
            "-e",
            "/tmp/scripts/install_plugins.sh"]
          volumeMounts:
            - mountPath: {{ .Values.sonar.sonarqubeFolder }}/extensions/downloads
              name: data
              subPath: extensions/downloads
            - mountPath: {{ .Values.sonar.sonarqubeFolder }}/lib/common
              name: data
              subPath: lib/common
            - name: install-plugins
              mountPath: /tmp/scripts/
      {{- end }}
        - command:
            - sh
            - -c
            - while ! nc -w 1 sonar-db 5432 </dev/null; do echo waiting for sonar-db;
              sleep 10; done;
          image: {{.Values.sonar.initImage}}
          imagePullPolicy: "{{ .Values.sonar.imagePullPolicy }}"
          name: sonarinit
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 999
      serviceAccount: sonar
      serviceAccountName: sonar
      terminationGracePeriodSeconds: 30
      volumes:
        - name: install-plugins
          configMap:
            name: {{ .Values.sonar.name }}-install-plugins
            items:
              - key: install_plugins.sh
                path: install_plugins.sh
        - name: data
          persistentVolumeClaim:
            claimName: sonar-data
      {{- with .Values.sonar.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sonar.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.sonar.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  test: false
  triggers:
    - type: ConfigChange
{{end}}
{{end}}
